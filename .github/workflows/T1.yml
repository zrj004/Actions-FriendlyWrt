name: Build FriendlyWrt NanoPi M4 (Docker)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Create Dockerfile
      run: |
        cat > Dockerfile <<'EOF'
        FROM ubuntu:22.04
        ENV DEBIAN_FRONTEND=noninteractive
        RUN apt-get update && apt-get install -y \
            build-essential git wget flex bison gawk gcc-multilib g++-multilib gettext \
            libncurses5-dev libssl-dev python3-distutils python3-setuptools python3-pip \
            python3-pyelftools m4 automake autoconf unzip rsync file curl sudo ca-certificates \
            && rm -rf /var/lib/apt/lists/*
        WORKDIR /work

        # 克隆 FriendlyWrt 仓库
        RUN git clone --depth=1 -b master-v24.10 https://github.com/friendlyarm/friendlywrt.git friendlywrt

        WORKDIR /work/friendlywrt

        # 创建精简配置，针对 NanoPi M4
        RUN echo "CONFIG_TARGET_rockchip=y" > .config && \
            echo "CONFIG_TARGET_rockchip_armv8=y" >> .config && \
            echo "CONFIG_TARGET_rockchip_armv8_DEVICE_friendlyarm_nanopi-m4=y" >> .config && \
            cat >> .config <<'CFG'
        CONFIG_PACKAGE_luci-app-ssr-plus=y
        CONFIG_PACKAGE_luci-app-passwall=y
        CONFIG_PACKAGE_luci-compat=y
        CONFIG_PACKAGE_luci-lib-ipkg=y
        CONFIG_PACKAGE_ipset=y
        CONFIG_PACKAGE_ip-full=y
        CONFIG_PACKAGE_docker=y
        CONFIG_PACKAGE_dockerd=y
        CONFIG_PACKAGE_luci-app-dockerman=y
        CONFIG_PACKAGE_luci-lib-docker=y
        CFG

        RUN make defconfig
        EOF

    - name: Build Docker image
      run: docker build -t friendlywrt-builder -f Dockerfile .

    - name: Create artifact directory
      run: mkdir -p artifact

    - name: Compile FriendlyWrt inside Docker
      run: |
        docker run --rm -it \
          -v ${{ github.workspace }}/friendlywrt:/work/friendlywrt \
          -v ${{ github.workspace }}/artifact:/work/artifact \
          friendlywrt-builder \
          bash -c "
            export PATH=/work/friendlywrt/staging_dir/host/bin:\$PATH
            echo '编译 host 工具链'
            make tools/compile -j$(nproc)
            echo '增量编译 target + 插件'
            NPROC=\$(nproc)
            if [ \$NPROC -gt 4 ]; then JOBS=4; else JOBS=\$NPROC; fi
            make -j\$JOBS V=sc
            echo '打包 SD 镜像'
            FILENAME=NanoPi-M4-FriendlyWrt-24.10.img
            mv bin/targets/rockchip/armv8/\$FILENAME /work/artifact/ || true
            cd /work/artifact && gzip -9 \$FILENAME || true
          "

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: NanoPi-M4-images
        path: artifact/*.img.gz
